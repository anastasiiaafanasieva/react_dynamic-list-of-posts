{"version":3,"sources":["components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","api/posts.ts","api/api.ts","api/comments.ts","components/PostDetails/PostDetails.tsx","App.tsx","api/users.ts","index.tsx"],"names":["PostsList","posts","setSelectedPostId","selectedPostId","className","map","post","userId","title","id","type","onClick","NewCommentForm","handleAddComment","useState","name","setName","email","setEmail","body","setBody","inputError","setInputError","clearState","useEffect","handleSubmit","event","a","preventDefault","onSubmit","placeholder","value","onChange","target","disabled","getData","url","options","fetch","then","response","json","getAllPosts","getPostComments","postId","postNewComment","method","headers","JSON","stringify","PostDetails","postDetails","setPostDetails","postComments","setPostComments","showButton","setShowButton","getPostDetails","data","CommentsApi","handleDeleteComment","commentsFromServer","comment","App","setPosts","users","setUsers","selectedUser","setSelectedUser","getPosts","PostsApi","UserSelect","useCallback","user","ReactDOM","render","document","getElementById"],"mappings":"gVAUaA,EAA6B,SAAC,GAAD,IACxCC,EADwC,EACxCA,MACAC,EAFwC,EAExCA,kBACAC,EAHwC,EAGxCA,eAHwC,OAKxC,sBAAKC,UAAU,YAAf,UACE,wCAEA,oBAAI,UAAQ,cAAcA,UAAU,kBAApC,SACGH,EAAMI,KAAI,SAAAC,GAAI,OACb,mCACE,qBAAkBF,UAAU,kBAA5B,UACE,gCACE,6CAAcE,EAAKC,OAAnB,SACCD,EAAKE,SAEPL,IAAmBG,EAAKG,GAErB,wBACEC,KAAK,SACLN,UAAU,4DAEVO,QAAS,kBAAMT,EAAkB,OAJnC,mBAUA,wBACEQ,KAAK,SACLN,UAAU,2BACVO,QAAS,kBAAMT,EAAkBI,EAAKG,KAHxC,oBAjBGH,EAAKG,eCbXG,G,MAAkC,SAAC,GAGzC,IAFLC,EAEI,EAFJA,iBACAV,EACI,EADJA,eAEA,EAAwBW,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAwBJ,mBAAS,IAAjC,mBAAOK,EAAP,KAAaC,EAAb,KACA,EAAoCN,oBAAS,GAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KAEMC,EAAa,WACjBP,EAAQ,IACRE,EAAS,IACTE,EAAQ,IACRE,GAAc,IAGhBE,qBAAU,WACRD,MACC,CAACpB,IAEJ,IAAMsB,EAAY,uCAAG,WAAOC,GAAP,SAAAC,EAAA,yDACnBD,EAAME,iBAEO,KAATb,GAAyB,KAAVE,GAAyB,KAATE,EAHhB,uBAIjBG,GAAc,GAJG,0CASbT,EAAiBE,EAAME,EAAOE,GATjB,OAWnBI,IAXmB,2CAAH,sDAclB,OACE,uBACEnB,UAAU,iBACVyB,SAAUJ,EAFZ,UAIE,qBAAKrB,UAAU,aAAf,SACE,uBACEM,KAAK,OACLK,KAAK,OACLe,YAAY,YACZC,MAAOhB,EACPX,UAAU,wBACV4B,SAAU,SAACN,GACTV,EAAQU,EAAMO,OAAOF,OACrBT,GAAc,QAKpB,qBAAKlB,UAAU,aAAf,SACE,uBACEM,KAAK,OACLK,KAAK,QACLe,YAAY,aACZC,MAAOd,EACPb,UAAU,wBACV4B,SAAU,SAACN,GACTR,EAASQ,EAAMO,OAAOF,OACtBT,GAAc,QAKpB,qBAAKlB,UAAU,aAAf,SACE,0BACEW,KAAK,OACLe,YAAY,oBACZC,MAAOZ,EACPf,UAAU,wBACV4B,SAAU,SAACN,GACTN,EAAQM,EAAMO,OAAOF,OACrBT,GAAc,QAKnBD,GACC,qBAAKjB,UAAU,gCAAf,SACE,mBAAGA,UAAU,QAAb,6CAIJ,wBACE8B,SAAUb,EACVX,KAAK,SACLN,UAAU,uCAHZ,gCCtFO+B,G,MAAU,SAACC,EAAaC,GACnC,OAAOC,MAAM,GAAD,OCTU,qCDSV,OAAeF,GAAOC,GAASE,MAAK,SAACC,GAAD,OAAcA,EAASC,YAG5DC,EAAc,WACzB,OAAOP,EAAQ,WEXJQ,EAAkB,SAACC,GAC9B,OAAOT,EAAQ,oBAAD,OAAqBS,KASxBC,EAAiB,SAC5BD,EACA7B,EACAE,EACAE,GAEA,OAAOgB,EAAQ,YAAa,CAC1BW,OAAQ,OACRC,QAAS,CACP,eAAgB,mCAElB5B,KAAM6B,KAAKC,UAAU,CACnBL,SACA7B,OACAE,QACAE,YCfO+B,EAA+B,SAAC,GAEtC,IADL/C,EACI,EADJA,eAEA,EAAsCW,mBAAsB,MAA5D,mBAAOqC,EAAP,KAAoBC,EAApB,KACA,EAAwCtC,mBAAoB,IAA5D,mBAAOuC,EAAP,KAAqBC,EAArB,KACA,EAAoCxC,oBAAS,GAA7C,mBAAOyC,EAAP,KAAmBC,EAAnB,KAEAhC,qBAAU,WACR,IAAMiC,EAAc,uCAAG,WAAOhD,GAAP,eAAAkB,EAAA,sEHClBQ,EAAQ,UAAD,OGAiC1B,IADtB,OACfiD,EADe,OAGrBN,EAAeM,GAHM,2CAAH,sDAMdf,EAAe,uCAAG,WAAOlC,GAAP,eAAAkB,EAAA,sEACHgC,EAA4BlD,GADzB,OAChBiD,EADgB,OAGtBJ,EAAgBI,GAHM,2CAAH,sDAMrBD,EAAetD,GACfwC,EAAgBxC,KACf,CAACA,IAEJ,IAAMyD,EAAmB,uCAAG,WAAOnD,GAAP,eAAAkB,EAAA,sED7BrBQ,EAAQ,aAAD,OC8BwB1B,GD9BA,CACpCqC,OAAQ,WC4BkB,uBAGOa,EACdxD,GAJO,OAGpB0D,EAHoB,OAM1BP,EAAgBO,GANU,2CAAH,sDASnBhD,EAAgB,uCAAG,WACvBE,EACAE,EACAT,GAHuB,eAAAmB,EAAA,sEAKjBgC,EAA2BxD,EAAgBY,EAAME,EAAOT,GALvC,uBAOUmD,EACdxD,GARI,OAOjB0D,EAPiB,OAUvBP,EAAgBO,GAVO,2CAAH,0DAatB,OACE,mCACmB,OAAhBV,GAEG,sBAAK/C,UAAU,cAAf,UACE,+CAEA,yBAASA,UAAU,oBAAnB,SACE,4BAAI+C,EAAY3C,UAGlB,0BAASJ,UAAU,wBAAwB,UAAQ,cAAnD,UACE,qBAAKA,UAAU,uBAAf,SACGmD,EAEG,wBACE7C,KAAK,SACLN,UAAU,SACVO,QAAS,kBAAM6C,GAAc,IAH/B,2BASA,wBACE9C,KAAK,SACLN,UAAU,SACVO,QAAS,kBAAM6C,GAAc,IAH/B,6BAWLD,GACC,oBAAI,UAAQ,cAAcnD,UAAU,oBAApC,SACGiD,EAAahD,KAAI,SAAAyD,GAAO,OACvB,qBACE,UAAQ,cAER1D,UAAU,yBAHZ,UAKE,wBACEO,QAAS,kBAAMiD,EAAoBE,EAAQrD,KAC3CC,KAAK,SACLN,UAAU,oCAHZ,eAOA,4BAAI0D,EAAQ3C,SAVP2C,EAAQrD,YAiBvB,kCACE,qBAAKL,UAAU,4BAAf,SACE,cAAC,EAAD,CACES,iBAAkBA,EAClBV,eAAgBA,cClCnB4D,EAxEO,WACpB,MAA0BjD,mBAAS,IAAnC,mBAAOb,EAAP,KAAc+D,EAAd,KACA,EAA0BlD,mBAAS,IAAnC,mBAAOmD,EAAP,KAAcC,EAAd,KACA,EAAwCpD,mBAAS,GAAjD,mBAAOqD,EAAP,KAAqBC,EAArB,KACA,EAA4CtD,mBAAwB,MAApE,mBAAOX,EAAP,KAAuBD,EAAvB,KAEAsB,qBAAU,WChBHW,EAAQ,UDiBCI,KAAK2B,KAClB,IAEH1C,qBAAU,WACR,IAAM6C,EAAQ,uCAAG,4BAAA1C,EAAA,sEACI2C,IADJ,OACTZ,EADS,OAGfM,EAASN,GAHM,2CAAH,qDAMdW,MACC,IAEH7C,qBAAU,WACRtB,EAAkB,QACjB,CAACiE,IAEJ,IAAMI,EAAaC,sBAAW,uCAAC,WAAOC,GAAP,eAAA9C,EAAA,yDACP,IAAT8C,EADgB,gCAEnBH,IAFmB,yDJpBxBnC,EAAQ,iBAAD,OIuBoBsC,IAHH,0BACvBf,EADuB,KAK7BU,EAAgBK,GAEhBT,EAASN,GAPoB,4CAAD,sDAQ3B,CAACS,IAEJ,OACE,sBAAK/D,UAAU,MAAf,UACE,wBAAQA,UAAU,cAAlB,SACE,wDAGE,yBACEA,UAAU,qBACV4B,SAAU,SAACN,GAAD,OAAW6C,GAAY7C,EAAMO,OAAOF,QAFhD,UAIE,wBAAQA,MAAM,IAAd,uBAECkC,EAAM5D,KAAI,SAACoE,GAAD,OACT,wBAAsB1C,MAAO0C,EAAKhE,GAAlC,SAAuCgE,EAAK1D,MAA/B0D,EAAKhE,eAM1B,uBAAML,UAAU,YAAhB,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACEH,MAAOA,EACPC,kBAAmBA,EACnBC,eAAgBA,MAInBA,GACC,qBAAKC,UAAU,eAAf,SACE,cAAC,EAAD,CAAaD,eAAgBA,aEzEzCuE,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.bd9c3354.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../../types/Post';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[],\n  setSelectedPostId: CallableFunction,\n  selectedPostId: number | null,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  setSelectedPostId,\n  selectedPostId,\n}) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul data-cy=\"postDetails\" className=\"PostsList__list\">\n      {posts.map(post => (\n        <>\n          <li key={post.id} className=\"PostsList__item\">\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n            {selectedPostId === post.id\n              ? (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\n                  PostsList__button--active button\"\n                  onClick={() => setSelectedPostId(null)}\n                >\n                  Close\n                </button>\n              )\n              : (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => setSelectedPostId(post.id)}\n                >\n                  Open\n                </button>\n              )}\n          </li>\n        </>\n      ))}\n    </ul>\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  handleAddComment: CallableFunction,\n  selectedPostId: number,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  handleAddComment,\n  selectedPostId,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [inputError, setInputError] = useState(false);\n\n  const clearState = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n    setInputError(false);\n  };\n\n  useEffect(() => {\n    clearState();\n  }, [selectedPostId]);\n\n  const handleSubmit = async (event: React.SyntheticEvent) => {\n    event.preventDefault();\n\n    if (name === '' || email === '' || body === '') {\n      setInputError(true);\n\n      return;\n    }\n\n    await handleAddComment(name, email, body);\n\n    clearState();\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          value={name}\n          className=\"NewCommentForm__input\"\n          onChange={(event) => {\n            setName(event.target.value);\n            setInputError(false);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          value={email}\n          className=\"NewCommentForm__input\"\n          onChange={(event) => {\n            setEmail(event.target.value);\n            setInputError(false);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          value={body}\n          className=\"NewCommentForm__input\"\n          onChange={(event) => {\n            setBody(event.target.value);\n            setInputError(false);\n          }}\n        />\n      </div>\n\n      {inputError && (\n        <div className=\"NewCommentForm__error-message\">\n          <p className=\"error\">Please, enter comment details</p>\n        </div>\n      )}\n\n      <button\n        disabled={inputError}\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import { BASE_URL } from './api';\n\ntype Options = {\n  method: string;\n  headers?: {} | undefined;\n  body?: string | undefined;\n};\n\nexport const getData = (url: string, options?: Options) => {\n  return fetch(`${BASE_URL}${url}`, options).then((response) => response.json());\n};\n\nexport const getAllPosts = () => {\n  return getData('/posts');\n};\n\nexport const getUserPosts = (userId: number) => {\n  return getData(`/posts?userId=${userId}`);\n};\n\nexport const getPostDetails = (postId: number) => {\n  return getData(`/posts/${postId}`);\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n","import { getData } from './posts';\n\nexport const getPostComments = (postId: number) => {\n  return getData(`/comments?postId=${postId}`);\n};\n\nexport const deletePostComment = (postId: number) => {\n  return getData(`/comments/${postId}`, {\n    method: 'DELETE',\n  });\n};\n\nexport const postNewComment = (\n  postId: number,\n  name: string,\n  email: string,\n  body: string,\n) => {\n  return getData('/comments', {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  });\n};\n","import React, { useEffect, useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport * as PostsApi from '../../api/posts';\nimport * as CommentsApi from '../../api/comments';\nimport { Post } from '../../types/Post';\nimport { Comment } from '../../types/Comment';\n\ntype Props = {\n  selectedPostId: number,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPostId,\n}) => {\n  const [postDetails, setPostDetails] = useState<Post | null>(null);\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n  const [showButton, setShowButton] = useState(true);\n\n  useEffect(() => {\n    const getPostDetails = async (id: number) => {\n      const data = await PostsApi.getPostDetails(id);\n\n      setPostDetails(data);\n    };\n\n    const getPostComments = async (id: number) => {\n      const data = await CommentsApi.getPostComments(id);\n\n      setPostComments(data);\n    };\n\n    getPostDetails(selectedPostId);\n    getPostComments(selectedPostId);\n  }, [selectedPostId]);\n\n  const handleDeleteComment = async (id: number) => {\n    await CommentsApi.deletePostComment(id);\n\n    const commentsFromServer = await CommentsApi\n      .getPostComments(selectedPostId);\n\n    setPostComments(commentsFromServer);\n  };\n\n  const handleAddComment = async (\n    name: string,\n    email: string,\n    title: string,\n  ) => {\n    await CommentsApi.postNewComment(selectedPostId, name, email, title);\n\n    const commentsFromServer = await CommentsApi\n      .getPostComments(selectedPostId);\n\n    setPostComments(commentsFromServer);\n  };\n\n  return (\n    <>\n      {postDetails !== null\n        && (\n          <div className=\"PostDetails\">\n            <h2>Post details:</h2>\n\n            <section className=\"PostDetails__post\">\n              <p>{postDetails.title}</p>\n            </section>\n\n            <section className=\"PostDetails__comments\" data-cy=\"postDetails\">\n              <div className=\"PostDetails__buttons\">\n                {showButton\n                  ? (\n                    <button\n                      type=\"button\"\n                      className=\"button\"\n                      onClick={() => setShowButton(false)}\n                    >\n                      Hide comments\n                    </button>\n                  )\n                  : (\n                    <button\n                      type=\"button\"\n                      className=\"button\"\n                      onClick={() => setShowButton(true)}\n\n                    >\n                      Show comments\n                    </button>\n                  )}\n              </div>\n\n              {showButton && (\n                <ul data-cy=\"postDetails\" className=\"PostDetails__list\">\n                  {postComments.map(comment => (\n                    <li\n                      data-cy=\"postDetails\"\n                      key={comment.id}\n                      className=\"PostDetails__list-item\"\n                    >\n                      <button\n                        onClick={() => handleDeleteComment(comment.id)}\n                        type=\"button\"\n                        className=\"PostDetails__remove-button button\"\n                      >\n                        X\n                      </button>\n                      <p>{comment.body}</p>\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </section>\n\n            <section>\n              <div className=\"PostDetails__form-wrapper\">\n                <NewCommentForm\n                  handleAddComment={handleAddComment}\n                  selectedPostId={selectedPostId}\n                />\n              </div>\n            </section>\n          </div>\n        )}\n    </>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport * as PostsApi from './api/posts';\nimport { getAllUsers } from './api/users';\n\ntype User = {\n  id: number,\n  name: string,\n};\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState<number | null>(null);\n\n  useEffect(() => {\n    getAllUsers().then(setUsers);\n  }, []);\n\n  useEffect(() => {\n    const getPosts = async () => {\n      const data = await PostsApi.getAllPosts();\n\n      setPosts(data);\n    };\n\n    getPosts();\n  }, []);\n\n  useEffect(() => {\n    setSelectedPostId(null);\n  }, [selectedUser]);\n\n  const UserSelect = useCallback(async (user) => {\n    const data = user === 0\n      ? await PostsApi.getAllPosts()\n      : await PostsApi.getUserPosts(user);\n\n    setSelectedUser(user);\n\n    setPosts(data);\n  }, [selectedUser]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={(event) => UserSelect(+event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n\n            {users.map((user: User) => (\n              <option key={user.id} value={user.id}>{user.name}</option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            setSelectedPostId={setSelectedPostId}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        {selectedPostId && (\n          <div className=\"App__content\">\n            <PostDetails selectedPostId={selectedPostId} />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { getData } from './posts';\n\nexport const getAllUsers = () => {\n  return getData('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}